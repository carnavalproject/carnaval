// General Mixins

@mixin trans($duration: 0.3s, $property: all, $timing-function: linear, $delay: 0s) {
	-webkit-transition: $property $duration $timing-function $delay;
  	-o-transition: $property $duration $timing-function $delay;
  	-moz-transition: $property $duration $timing-function $delay;
  	transition: $property $duration $timing-function $delay;
}

@mixin grayscale($value:100%) {
   -webkit-filter: grayscale($value);
   filter: grayscale($value);
}

@mixin placeholder {
	&::-webkit-input-placeholder {
        @content;
	}
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
}

// Mixins Transforms
@mixin transform($transforms) {
  -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -ms-transform: $transforms;
    -o-transform: $transforms;
    transform: $transforms;
}

@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

@mixin translateX($x) {
  @include transform(translateX($x));
}

@mixin translateY($y) {
  @include transform(translateY($y));
}

@mixin scale($scale) {
  @include transform(scale($scale));
}

@mixin rotate($deg) {
  @include transform(rotate(#{$deg}deg));
}

@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}

// Mixins Text

@mixin ellipsis {
  white-space: nowrap;
  overflow: hidden;
    text-overflow: ellipsis;
}

@mixin line-clamp($fontsize, $lineheight, $lines) {
  font-size: $fontsize;
  line-height: $lineheight !important;
  display: block; /* Fallback for non-webkit */
  display: -webkit-box;
    height: $fontsize*$lineheight*$lines; /* Fallback for non-webkit */
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Mixin Images
@mixin object-fit($val:cover) {
  @if $val==contain {
    font-family: "object-fit: contain; object-position: 50% 50%;";
    object-fit: contain;
  }
  @else {
    font-family: "object-fit: cover; object-position: 50% 50%;";
    object-fit: cover;
  }
  min-height: initial!important;
  max-height: none!important;
}

// Mixins Flex
@mixin flex {
  display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

@mixin inline-flex {
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -moz-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -moz-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

@mixin flex-wrap($value: wrap) {
  -webkit-flex-wrap: $value;
  -moz-flex-wrap: $value;
  @if $value == wrap {
    -ms-flex-wrap: $value;
  } @else { 
    -ms-flex-wrap: none; 
  }
  flex-wrap: $value;
}

@mixin flex-flow($values: (row nowrap)) {
  -webkit-flex-flow: $values;
  -moz-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}

@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -moz-order: $int;
  -ms-flex-order: $int;
  order: $int;
}

@mixin flex-grow($int: 0) {
  -webkit-box-flex: $int;
  -webkit-flex-grow: $int;
  -moz-flex-grow: $int;
  -ms-flex-positive: $int;
  flex-grow: $int;
}

@mixin flex-shrink($int: 1) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex-negative: $int;
  flex-shrink: $int;
}

@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  -moz-flex-basis: $value;
  -ms-flex-preferred-size: $value;
  flex-basis: $value;
}

@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
  }
  @else if $value == flex-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
  }
  @else if $value == space-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
  } 
  @else if $value == space-around {
    -ms-flex-pack: distribute;    
  }
  @else if $value == space-evenly {
    -ms-flex-pack: distribute;    
  }
  @else {
    -webkit-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  -moz-justify-content: $value;
  justify-content: $value;
}

@mixin align-items($value: center) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  -moz-align-items: $value;
  align-items: $value;
}

@mixin align-self($value: auto) {
  -webkit-align-self: $value;
  -moz-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}

@mixin align-content($value: flex-start) {
  -webkit-align-content: $value;
  -moz-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}